{"version":3,"sources":["planetas.js","Planeta.js","App.js","serviceWorker.js","index.js"],"names":["listaPlanetas","imagem","nome","level","lucro","acrescimo","bases","clicks","inicialClicks","investimento","cores","Planeta","alteraPlaneta","setDinheiro","dinheiro","data","id","style","borderColor","parseInt","backgroundColor","onClick","src","toFixed","App","useState","planetas","setPlanetas","map","planeta","index","propriedade","valor","copiaPlanetas","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0fe62de.chunk.js","sourcesContent":["const listaPlanetas = [\r\n  {\r\n    imagem: \"./img/Mercury.png\",\r\n    nome: 'Mercury',\r\n    level: 1,\r\n    lucro: 1,\r\n    acrescimo: 1,\r\n    bases: 1,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 10,\r\n  },\r\n  // {\r\n  //   imagem: \"./img/Venus.png\",\r\n  //   nome: 'Venus',\r\n  //   level: 1,\r\n  //   lucro: 5,\r\n  //   acrescimo: 5,\r\n  //   bases: 0,\r\n  //   clicks: 8,\r\n  //   investimento: 50,\r\n  // },\r\n  {\r\n    imagem: \"./img/Earth.png\",\r\n    nome: 'Earth',\r\n    level: 1,\r\n    lucro: 30,\r\n    acrescimo: 30,\r\n    bases: 0,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 300,\r\n  },\r\n  {\r\n    imagem: \"./img/Mars.png\",\r\n    nome: 'Mars',\r\n    level: 1,\r\n    lucro: 70,\r\n    acrescimo: 70,\r\n    bases: 0,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 700,\r\n  },\r\n  {\r\n    imagem: \"./img/Jupiter.png\",\r\n    nome: 'Jupiter',\r\n    level: 1,\r\n    lucro: 800,\r\n    acrescimo: 800,\r\n    bases: 0,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 8000,\r\n  },\r\n  // {\r\n  //   imagem: \"./img/Saturn.png\",\r\n  //   nome: 'Saturn',\r\n  //   level: 1,\r\n  //   lucro: 2000,\r\n  //   acrescimo: 2000,\r\n  //   bases: 0,\r\n  //   clicks: 8,\r\n  //   investimento: 20000,\r\n  // },\r\n  {\r\n    imagem: \"./img/Uranus.png\",\r\n    nome: 'Uranus',\r\n    level: 1,\r\n    lucro: 13000,\r\n    acrescimo: 13000,\r\n    bases: 0,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 130000,\r\n  },\r\n  {\r\n    imagem: \"./img/Neptune.png\",\r\n    nome: 'Neptune',\r\n    level: 1,\r\n    lucro: 100000,\r\n    acrescimo: 100000,\r\n    bases: 0,\r\n    clicks: 8,\r\n    inicialClicks:0,\r\n    investimento: 1000000,\r\n  },\r\n]\r\nexport default listaPlanetas;","import React, { useState } from \"react\";\r\n\r\nconst cores = [\r\n  \"#181818\", \"#708090\", \"#CD853F\", \"#C0C0C0\", \"#DAA520\", \"#3CB371\", \"#EE82EE\", \"#8B008B\", \"#C71585\", \"#CD5C5C\"\r\n];\r\n\r\nfunction Planeta({ alteraPlaneta, setDinheiro, dinheiro, data }) {\r\n  return (\r\n    <div id=\"content\">\r\n      <div id=\"wrap\">\r\n        <div>\r\n          {\" \"}\r\n          {/* nome */}\r\n          {data.nome}\r\n        </div>\r\n\r\n        <div id=\"middle\">\r\n          <button\r\n            style={{\r\n              borderColor: cores[parseInt(data.bases/5)],\r\n              backgroundColor: cores[parseInt(data.bases/5)]\r\n            }}\r\n            id=\"botaoPlaneta\"\r\n            onClick={() => {\r\n              if (data.inicialClicks >= data.clicks) {\r\n                alteraPlaneta(\"lucro\", data.lucro * 1.3);\r\n                alteraPlaneta(\"clicks\", data.clicks * 1.5);\r\n                alteraPlaneta(\"inicialClicks\", 0);\r\n              } \r\n              else {\r\n                alteraPlaneta(\"inicialClicks\", data.inicialClicks + 1);\r\n              }\r\n\r\n              setDinheiro(dinheiro + data.lucro * data.bases);\r\n            }}\r\n          >\r\n            <img id=\"imagem\" src={data.imagem} />\r\n          </button>\r\n          +{(data.lucro * data.bases).toFixed(1)}\r\n          <button\r\n            id=\"investir\"\r\n            onClick={() => {\r\n              if (dinheiro > data.investimento) {\r\n                alteraPlaneta(\"bases\", data.bases + 1);\r\n                setDinheiro(dinheiro - data.investimento);\r\n                alteraPlaneta(\"investimento\", data.investimento * 2);\r\n              }\r\n            }}\r\n          >\r\n            + Bases ${data.investimento}\r\n          </button>\r\n        </div>\r\n        <div id=\"footer\">\r\n          <span>{parseInt((100 * data.inicialClicks) / data.clicks)}%</span>\r\n          <span>Bases: {data.bases}</span>\r\n        </div>\r\n\r\n        <div>{}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Planeta;\r\n","import React, { useState } from \"react\";\nimport listaPlanetas from \"./planetas\";\nimport Planeta from \"./Planeta\";\n\nfunction App() {\n  const [planetas, setPlanetas] = useState(listaPlanetas);\n  const [dinheiro, setDinheiro] = useState(0);\n\n  function alteraPlaneta(index, propriedade, valor) {\n    const copiaPlanetas = planetas;\n    copiaPlanetas[index][propriedade] = valor;\n\n    setPlanetas(copiaPlanetas);\n  }\n\n  return (\n    <div>\n      <div id=\"dinheiroPosition\">\n        <div id=\"dinheiro\">$ {parseInt(dinheiro)}</div>\n      </div>\n      \n      <div id=\"planetasContainer\">\n        {planetas.map((planeta, index) => (\n          <Planeta\n            alteraPlaneta={(propriedade, valor) =>\n              alteraPlaneta(index, propriedade, valor)\n            }\n            data={planeta}\n            setDinheiro={setDinheiro}\n            dinheiro={dinheiro}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}